***Initializing Game ***
Initialized game with values:
Players: 2
Cards: Council Room, Tribute, Sea Hag, Adventurer, Embargo, Gardens, Cutpurse, Salvager, Mine, Outpost
***Starting Game***
Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Salvager
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Salvager
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Salvager
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Gardens
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Gardens
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Sea Hag
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Salvager
Actions left: 1
Played: Salvager
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 2
Bought Estate
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Curse
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Estate
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Gardens
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
Played: Sea Hag
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Council Room
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Salvager
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Sea Hag
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Gardens
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Sea Hag
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Council Room
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Cutpurse
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Mine
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Duchy
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
Played: Sea Hag
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Mine
Actions left: 1
Error: Could not play Mine
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Gardens
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Cutpurse
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Cutpurse
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Mine
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Salvager
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Gardens
Actions left: 1
Error: Could not play Gardens
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Embargo
Actions left: 1
Played: Embargo
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Cutpurse
Actions left: 1
Played: Cutpurse
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Card: Sea Hag
Actions left: 1
Played: Sea Hag
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 1
Bought Copper
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Silver
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Tribute
Out of buys! Next player's turn

Player 1's turn
*Action Phase*
Card: Council Room
Actions left: 1
Played: Council Room
Out of actions! Move to buy phase
*Buy Phase*
Number of buys: 2
Bought Mine
Bought Copper
Out of buys! Next player's turn

Player 2's turn
*Action Phase*
Actions left: 1
*Buy Phase*
Number of buys: 1
Bought Embargo
Out of buys! Next player's turn

Player 2 wins!
Score: 6

****Game Ended****
File 'dominion.c'
Lines executed:56.74% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:/******************************************************
        -:   10:                Card Effect Functions
        -:   11:******************************************************/
    #####:   12:void cardAdventurer(struct gameState *state, int currentPlayer) {
    #####:   13:    int cardDrawn = 0;
    #####:   14:    int drawnTreasure = 0;
        -:   15:    int tempHand[MAX_HAND];
    #####:   16:    int z = 0; // for temp hand...
        -:   17:
    #####:   18:    while(drawnTreasure < 2) {
    #####:   19:        if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:   20:            shuffle(currentPlayer, state);
        -:   21:        }
    #####:   22:        drawCard(currentPlayer, state);
    #####:   23:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   24:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####:   25:            drawnTreasure++;
        -:   26:        }
        -:   27:        else {
    #####:   28:            tempHand[z] = cardDrawn;
    #####:   29:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   30:            z++;
        -:   31:        }
        -:   32:    }
    #####:   33:    while(z - 1 >= 0){
    #####:   34:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z - 1]; // discard all cards in play that have been drawn
    #####:   35:        z = z + 1;
        -:   36:    }
    #####:   37:}
        -:   38:
        1:   39:void cardCouncilRoom(struct gameState *state, int currentPlayer, int handPos){
        -:   40:    // Add four cards
        5:   41:    for(int i = 0; i < 4; i++){
        4:   42:        drawCard(currentPlayer, state);
        -:   43:    }
        -:   44:
        -:   45:    // Add buy
        1:   46:    state->numBuys++;
        -:   47:
        -:   48:    // Every other player draws a card
        3:   49:    for(int i = 0; i < state->numPlayers; i++){
        2:   50:        if(i != currentPlayer){
        1:   51:            drawCard(i, state);
        -:   52:        }
        -:   53:    }
        -:   54:
        1:   55:    discardCard(handPos, currentPlayer, state, 0);
        1:   56:}
        -:   57:
    #####:   58:void cardFeast(struct gameState *state, int currentPlayer, int choice1){
        -:   59:    int tempHand[MAX_HAND];
        -:   60:
        -:   61:    // Gain a card with a cost of up to 5
        -:   62:    // Backup hand?
    #####:   63:    for(int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:   64:        tempHand[i] = state->hand[currentPlayer][i]; // Backup card
    #####:   65:        state->hand[currentPlayer][i] = -1; // Set to nothing
        -:   66:    }
        -:   67:
        -:   68:    // Update coins for buy phase
    #####:   69:    updateCoins(currentPlayer, state, 5);
        -:   70:
    #####:   71:    int x = 1;
    #####:   72:    while(x == 1){ // Buy one card
    #####:   73:        if (supplyCount(choice1, state) <= 0) {
        -:   74:            if(DEBUG) {
        -:   75:                printf("None of that card left, sorry!\n");
        -:   76:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   77:            }
        -:   78:        }
    #####:   79:        else if (state->coins < getCost(choice1)) {
    #####:   80:            printf("That card is too expensive!\n");
        -:   81:
        -:   82:            if (DEBUG) {
        -:   83:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:   84:            }
        -:   85:        }
        -:   86:        else {
        -:   87:            if (DEBUG) {
        -:   88:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   89:            }
        -:   90:
    #####:   91:            gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:   92:            x = 0; //No more buying cards
        -:   93:
        -:   94:            if (DEBUG) {
        -:   95:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   96:            }
        -:   97:        }
        -:   98:    }
        -:   99:
        -:  100:    // Reset hand
    #####:  101:    for(int i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  102:        state->hand[currentPlayer][i] = tempHand[i];
    #####:  103:        tempHand[i] = 1;
        -:  104:    }
    #####:  105:}
        -:  106:
        1:  107:int cardMine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  108:    int j;
        -:  109:
        -:  110:    // Store card we will trash
        1:  111:    j = state->hand[currentPlayer][choice1];
        -:  112:
        1:  113:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
    #####:  114:        return 0;
        -:  115:    }
        -:  116:
        1:  117:    if (choice2 > treasure_map || choice2 < curse){
    #####:  118:        return 0;
        -:  119:    }
        -:  120:
        1:  121:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
    #####:  122:        return 0;
        -:  123:    }
        -:  124:
        1:  125:    gainCard (choice2, state, 2, currentPlayer);
        -:  126:
        -:  127:    //discard card from hand
        1:  128:    discardCard (handPos, currentPlayer, state, 0);
        -:  129:
        -:  130:    //discard trashed card
        1:  131:    for (int i = 0; i < state->handCount[currentPlayer]; i++){
        1:  132:        if (state->hand[currentPlayer][i] == j){
        1:  133:            discardCard(i, currentPlayer, state, 0);
        1:  134:            break;
        -:  135:        }
        -:  136:    }
        -:  137:
        1:  138:    return -1;
        -:  139:}
        -:  140:
    #####:  141:int cardRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  142:    int j;
        -:  143:
        -:  144:    // Store card we will trash
    #####:  145:    j = state->hand[currentPlayer][choice1];
        -:  146:
    #####:  147:    if ((getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2)){
    #####:  148:        return -1;
        -:  149:    }
        -:  150:
    #####:  151:    gainCard(choice2, state, 0, currentPlayer);
        -:  152:
        -:  153:    //discard card from hand
    #####:  154:    discardCard(handPos, currentPlayer, state, 0);
        -:  155:
        -:  156:    //discard trashed card
    #####:  157:    for (int i = 0; i < state->handCount[currentPlayer] - 1; i++){
    #####:  158:        if (state->hand[currentPlayer][i] == j){
    #####:  159:            discardCard(i, currentPlayer, state, 0);
    #####:  160:            break;
        -:  161:        }
        -:  162:    }
        -:  163:
    #####:  164:    return 0;
        -:  165:}
        -:  166:
        -:  167:
        -:  168:
        -:  169:/******************************************************
        -:  170:                Dominion Functions
        -:  171:******************************************************/
        -:  172:
        -:  173:
     1680:  174:int compare(const void* a, const void* b) {
     1680:  175:	if (*(int*)a > *(int*)b)
      768:  176:	return 1;
      912:  177:	if (*(int*)a < *(int*)b)
      268:  178:	return -1;
      644:  179:	return 0;
        -:  180:}
        -:  181:
    #####:  182:struct gameState* newGame() {
    #####:  183:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:  184:	return g;
        -:  185:}
        -:  186:
    #####:  187:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  188:int k8, int k9, int k10) {
    #####:  189:	int* k = malloc(10 * sizeof(int));
    #####:  190:	k[0] = k1;
    #####:  191:	k[1] = k2;
    #####:  192:	k[2] = k3;
    #####:  193:	k[3] = k4;
    #####:  194:	k[4] = k5;
    #####:  195:	k[5] = k6;
    #####:  196:	k[6] = k7;
    #####:  197:	k[7] = k8;
    #####:  198:	k[8] = k9;
    #####:  199:	k[9] = k10;
    #####:  200:	return k;
        -:  201:}
        -:  202:
        1:  203:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  204:struct gameState *state) {
        -:  205:
        -:  206:	int i;
        -:  207:	int j;
        -:  208:	int it;
        -:  209:	//set up random number generator
        1:  210:	SelectStream(1);
        1:  211:	PutSeed((long)randomSeed);
        -:  212:
        -:  213:	//check number of players
        1:  214:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  215:	{
    #####:  216:		return -1;
        -:  217:	}
        -:  218:
        -:  219:	//set number of players
        1:  220:	state->numPlayers = numPlayers;
        -:  221:
        -:  222:	//check selected kingdom cards are different
       11:  223:	for (i = 0; i < 10; i++)
        -:  224:	{
      110:  225:		for (j = 0; j < 10; j++)
        -:  226:		{
      100:  227:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  228:			{
    #####:  229:				return -1;
        -:  230:			}
        -:  231:		}
        -:  232:	}
        -:  233:
        -:  234:
        -:  235:	//initialize supply
        -:  236:	///////////////////////////////
        -:  237:
        -:  238:	//set number of Curse cards
        1:  239:	if (numPlayers == 2)
        -:  240:	{
        1:  241:		state->supplyCount[curse] = 10;
        -:  242:	}
    #####:  243:	else if (numPlayers == 3)
        -:  244:	{
    #####:  245:		state->supplyCount[curse] = 20;
        -:  246:	}
        -:  247:	else
        -:  248:	{
    #####:  249:		state->supplyCount[curse] = 30;
        -:  250:	}
        -:  251:
        -:  252:	//set number of Victory cards
        1:  253:	if (numPlayers == 2)
        -:  254:	{
        1:  255:		state->supplyCount[estate] = 8;
        1:  256:		state->supplyCount[duchy] = 8;
        1:  257:		state->supplyCount[province] = 8;
        -:  258:	}
        -:  259:	else
        -:  260:	{
    #####:  261:		state->supplyCount[estate] = 12;
    #####:  262:		state->supplyCount[duchy] = 12;
    #####:  263:		state->supplyCount[province] = 12;
        -:  264:	}
        -:  265:
        -:  266:	//set number of Treasure cards
        1:  267:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  268:	state->supplyCount[silver] = 40;
        1:  269:	state->supplyCount[gold] = 30;
        -:  270:
        -:  271:	//set number of Kingdom cards
       21:  272:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  273:	{
      165:  274:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  275:		{
      155:  276:			if (kingdomCards[j] == i)
        -:  277:			{
        -:  278:				//check if card is a 'Victory' Kingdom card
       10:  279:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  280:				{
        2:  281:					if (numPlayers == 2){
        1:  282:						state->supplyCount[i] = 8;
        -:  283:					}
    #####:  284:					else{ state->supplyCount[i] = 12; }
        -:  285:				}
        -:  286:				else
        -:  287:				{
        9:  288:					state->supplyCount[i] = 10;
        -:  289:				}
       10:  290:				break;
        -:  291:			}
        -:  292:			else    //card is not in the set choosen for the game
        -:  293:			{
      145:  294:				state->supplyCount[i] = -1;
        -:  295:			}
        -:  296:		}
        -:  297:
        -:  298:	}
        -:  299:
        -:  300:	////////////////////////
        -:  301:	//supply intilization complete
        -:  302:
        -:  303:	//set player decks
        3:  304:	for (i = 0; i < numPlayers; i++)
        -:  305:	{
        2:  306:		state->deckCount[i] = 0;
        8:  307:		for (j = 0; j < 3; j++)
        -:  308:		{
        6:  309:			state->deck[i][j] = estate;
        6:  310:			state->deckCount[i]++;
        -:  311:		}
       16:  312:		for (j = 3; j < 10; j++)
        -:  313:		{
       14:  314:			state->deck[i][j] = copper;
       14:  315:			state->deckCount[i]++;
        -:  316:		}
        -:  317:	}
        -:  318:
        -:  319:	//shuffle player decks
        3:  320:	for (i = 0; i < numPlayers; i++)
        -:  321:	{
        2:  322:		if ( shuffle(i, state) < 0 )
        -:  323:		{
    #####:  324:			return -1;
        -:  325:		}
        -:  326:	}
        -:  327:
        -:  328:	//draw player hands
        3:  329:	for (i = 0; i < numPlayers; i++)
        -:  330:	{
        -:  331:		//initialize hand size to zero
        2:  332:		state->handCount[i] = 0;
        2:  333:		state->discardCount[i] = 0;
        -:  334:		//draw 5 cards
        -:  335:		// for (j = 0; j < 5; j++)
        -:  336:		//	{
        -:  337:			//	  drawCard(i, state);
        -:  338:		//	}
        -:  339:	}
        -:  340:
        -:  341:	//set embargo tokens to 0 for all supply piles
       28:  342:	for (i = 0; i <= treasure_map; i++)
        -:  343:	{
       27:  344:		state->embargoTokens[i] = 0;
        -:  345:	}
        -:  346:
        -:  347:	//initialize first player's turn
        1:  348:	state->outpostPlayed = 0;
        1:  349:	state->phase = 0;
        1:  350:	state->numActions = 1;
        1:  351:	state->numBuys = 1;
        1:  352:	state->playedCardCount = 0;
        1:  353:	state->whoseTurn = 0;
        1:  354:	state->handCount[state->whoseTurn] = 0;
        -:  355:	//int it; move to top
        -:  356:
        -:  357:	//Moved draw cards to here, only drawing at the start of a turn
        6:  358:	for (it = 0; it < 5; it++){
        5:  359:		drawCard(state->whoseTurn, state);
        -:  360:	}
        -:  361:
        1:  362:	updateCoins(state->whoseTurn, state, 0);
        -:  363:
        1:  364:	return 0;
        -:  365:}
        -:  366:
       24:  367:int shuffle(int player, struct gameState *state) {
        -:  368:
        -:  369:
        -:  370:	int newDeck[MAX_DECK];
       24:  371:	int newDeckPos = 0;
        -:  372:	int card;
        -:  373:	int i;
        -:  374:
       24:  375:	if (state->deckCount[player] < 1)
    #####:  376:	return -1;
       24:  377:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  378:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  379:
      562:  380:	while (state->deckCount[player] > 0) {
      514:  381:		card = floor(Random() * state->deckCount[player]);
      514:  382:		newDeck[newDeckPos] = state->deck[player][card];
      514:  383:		newDeckPos++;
     3624:  384:		for (i = card; i < state->deckCount[player]-1; i++) {
     3110:  385:			state->deck[player][i] = state->deck[player][i+1];
        -:  386:		}
      514:  387:		state->deckCount[player]--;
        -:  388:	}
      538:  389:	for (i = 0; i < newDeckPos; i++) {
      514:  390:		state->deck[player][i] = newDeck[i];
      514:  391:		state->deckCount[player]++;
        -:  392:	}
        -:  393:
       24:  394:	return 0;
        -:  395:}
        -:  396:
       30:  397:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  398:{
        -:  399:	int card;
       30:  400:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  401:
        -:  402:	//check if it is the right phase
       30:  403:	if (state->phase != 0)
        -:  404:	{
    #####:  405:		return -1;
        -:  406:	}
        -:  407:
        -:  408:	//check if player has enough actions
       30:  409:	if ( state->numActions < 1 )
        -:  410:	{
    #####:  411:		return -1;
        -:  412:	}
        -:  413:
        -:  414:	//get card played
       30:  415:	card = handCard(handPos, state);
        -:  416:
        -:  417:	//check if selected card is an action
       30:  418:	if ( card < adventurer || card > treasure_map )
        -:  419:	{
    #####:  420:		return -1;
        -:  421:	}
        -:  422:
        -:  423:	//play card
       30:  424:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  425:	{
       18:  426:		return -1;
        -:  427:	}
        -:  428:
        -:  429:	//reduce number of actions
       12:  430:	state->numActions--;
        -:  431:
        -:  432:	//update coins (Treasure cards may be added with card draws)
       12:  433:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  434:
       12:  435:	return 0;
        -:  436:}
        -:  437:
      524:  438:int buyCard(int supplyPos, struct gameState *state) {
        -:  439:	int who;
        -:  440:	if (DEBUG){
        -:  441:		printf("Entering buyCard...n");
        -:  442:	}
        -:  443:
        -:  444:	// I don't know what to do about the phase thing.
        -:  445:
      524:  446:	who = state->whoseTurn;
        -:  447:
      524:  448:	if (state->numBuys < 1){
        -:  449:		if (DEBUG)
        -:  450:			printf("You do not have any buys leftn");
    #####:  451:			return -1;
        -:  452:		}
      524:  453:		else if (supplyCount(supplyPos, state) <1){
        -:  454:			if (DEBUG)
        -:  455:				printf("There are not any of that type of card leftn");
       54:  456:				return -1;
        -:  457:		}
      470:  458:		else if (state->coins < getCost(supplyPos)){
        -:  459:			if (DEBUG)
        -:  460:				printf("You do not have enough money to buy that. You have %d coins.n", state->coins);
      374:  461:				return -1;
        -:  462:		}
        -:  463:		else {
       96:  464:			state->phase=1;
        -:  465:			//state->supplyCount[supplyPos]--;
       96:  466:			gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  467:
       96:  468:			state->coins = (state->coins) - (getCost(supplyPos));
       96:  469:			state->numBuys--;
        -:  470:			if (DEBUG) {
        -:  471:				printf("You bought card number %d for %d coins. You now have %d buys and %d coins.n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  472:			}
        -:  473:	}
        -:  474:
        -:  475:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  476:	//state->discardCount[who]++;
        -:  477:
       96:  478:	return 0;
        -:  479:}
        -:  480:
      977:  481:int numHandCards(struct gameState *state) {
      977:  482:	return state->handCount[ whoseTurn(state) ];
        -:  483:}
        -:  484:
     1441:  485:int handCard(int handPos, struct gameState *state) {
     1441:  486:	int currentPlayer = whoseTurn(state);
     1441:  487:	return state->hand[currentPlayer][handPos];
        -:  488:}
        -:  489:
      621:  490:int supplyCount(int card, struct gameState *state) {
      621:  491:	return state->supplyCount[card];
        -:  492:}
        -:  493:
        6:  494:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  495:	int i;
        6:  496:	int count = 0;
        -:  497:
       66:  498:	for (i = 0; i < state->deckCount[player]; i++)
        -:  499:	{
       60:  500:		if (state->deck[player][i] == card) count++;
        -:  501:	}
        -:  502:
       26:  503:	for (i = 0; i < state->handCount[player]; i++)
        -:  504:	{
       20:  505:		if (state->hand[player][i] == card) count++;
        -:  506:	}
        -:  507:
      170:  508:	for (i = 0; i < state->discardCount[player]; i++)
        -:  509:	{
      164:  510:		if (state->discard[player][i] == card) count++;
        -:  511:	}
        -:  512:
        6:  513:	return count;
        -:  514:}
        -:  515:
     2637:  516:int whoseTurn(struct gameState *state) {
     2637:  517:	return state->whoseTurn;
        -:  518:}
        -:  519:
       94:  520:int endTurn(struct gameState *state) {
        -:  521:	int k;
        -:  522:	int i;
       94:  523:	int currentPlayer = whoseTurn(state);
        -:  524:
        -:  525:	//Discard hand
      539:  526:	for (i = 0; i < state->handCount[currentPlayer]; i++){
      445:  527:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      445:  528:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  529:	}
       94:  530:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  531:
        -:  532:	//Code for determining the player
       94:  533:	if (currentPlayer < (state->numPlayers - 1)){
       47:  534:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  535:	}
        -:  536:	else{
       47:  537:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  538:	}
        -:  539:
       94:  540:	state->outpostPlayed = 0;
       94:  541:	state->phase = 0;
       94:  542:	state->numActions = 1;
       94:  543:	state->coins = 0;
       94:  544:	state->numBuys = 1;
       94:  545:	state->playedCardCount = 0;
       94:  546:	state->handCount[state->whoseTurn] = 0;
        -:  547:
        -:  548:	//int k; move to top
        -:  549:	//Next player draws hand
      564:  550:	for (k = 0; k < 5; k++){
      470:  551:		drawCard(state->whoseTurn, state);//Draw a card
        -:  552:	}
        -:  553:
        -:  554:	//Update money
       94:  555:	updateCoins(state->whoseTurn, state , 0);
        -:  556:
       94:  557:	return 0;
        -:  558:}
        -:  559:
       95:  560:int isGameOver(struct gameState *state) {
        -:  561:	int i;
        -:  562:	int j;
        -:  563:
        -:  564:	//if stack of Province cards is empty, the game ends
       95:  565:	if (state->supplyCount[province] == 0)
        -:  566:	{
    #####:  567:		return 1;
        -:  568:	}
        -:  569:
        -:  570:	//if three supply pile are at 0, the game ends
       95:  571:	j = 0;
     2470:  572:	for (i = 0; i < 25; i++)
        -:  573:	{
     2375:  574:		if (state->supplyCount[i] == 0)
        -:  575:		{
      135:  576:			j++;
        -:  577:		}
        -:  578:	}
       95:  579:	if ( j >= 3)
        -:  580:	{
        1:  581:		return 1;
        -:  582:	}
        -:  583:
       94:  584:	return 0;
        -:  585:}
        -:  586:
        3:  587:int scoreFor (int player, struct gameState *state) {
        -:  588:
        -:  589:	int i;
        3:  590:	int score = 0;
        -:  591:	//score from hand
        8:  592:	for (i = 0; i < state->handCount[player]; i++)
        -:  593:	{
        5:  594:		if (state->hand[player][i] == curse) { score = score - 1; };
        5:  595:		if (state->hand[player][i] == estate) { score = score + 1; };
        5:  596:		if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  597:		if (state->hand[player][i] == province) { score = score + 6; };
        5:  598:		if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  599:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  600:	}
        -:  601:
        -:  602:	//score from discard
       71:  603:	for (i = 0; i < state->discardCount[player]; i++)
        -:  604:	{
       68:  605:		if (state->discard[player][i] == curse) { score = score - 1; };
       68:  606:		if (state->discard[player][i] == estate) { score = score + 1; };
       68:  607:		if (state->discard[player][i] == duchy) { score = score + 3; };
       68:  608:		if (state->discard[player][i] == province) { score = score + 6; };
       68:  609:		if (state->discard[player][i] == great_hall) { score = score + 1; };
       68:  610:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  611:	}
        -:  612:
        -:  613:	//score from deck
       71:  614:	for (i = 0; i < state->discardCount[player]; i++)
        -:  615:	{
       68:  616:		if (state->deck[player][i] == curse) { score = score - 1; };
       68:  617:		if (state->deck[player][i] == estate) { score = score + 1; };
       68:  618:		if (state->deck[player][i] == duchy) { score = score + 3; };
       68:  619:		if (state->deck[player][i] == province) { score = score + 6; };
       68:  620:		if (state->deck[player][i] == great_hall) { score = score + 1; };
       68:  621:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  622:	}
        -:  623:
        3:  624:	return score;
        -:  625:}
        -:  626:
        1:  627:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  628:	int i;
        -:  629:	int j;
        -:  630:	int highScore;
        -:  631:	int currentPlayer;
        -:  632:
        -:  633:	//get score for each player
        5:  634:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  635:	{
        -:  636:		//set unused player scores to -9999
        4:  637:		if (i >= state->numPlayers)
        -:  638:		{
        2:  639:			players[i] = -9999;
        -:  640:		}
        -:  641:		else
        -:  642:		{
        2:  643:			players[i] = scoreFor (i, state);
        -:  644:		}
        -:  645:	}
        -:  646:
        -:  647:	//find highest score
        1:  648:	j = 0;
        5:  649:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  650:	{
        4:  651:		if (players[i] > players[j])
        -:  652:		{
        1:  653:			j = i;
        -:  654:		}
        -:  655:	}
        1:  656:	highScore = players[j];
        -:  657:
        -:  658:	//add 1 to players who had less turns
        1:  659:	currentPlayer = whoseTurn(state);
        5:  660:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  661:	{
        4:  662:		if ( players[i] == highScore && i > currentPlayer )
        -:  663:		{
        1:  664:			players[i]++;
        -:  665:		}
        -:  666:	}
        -:  667:
        -:  668:	//find new highest score
        1:  669:	j = 0;
        5:  670:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  671:	{
        4:  672:		if ( players[i] > players[j] )
        -:  673:		{
        1:  674:			j = i;
        -:  675:		}
        -:  676:	}
        1:  677:	highScore = players[j];
        -:  678:
        -:  679:	//set winners in array to 1 and rest to 0
        5:  680:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  681:	{
        4:  682:		if ( players[i] == highScore )
        -:  683:		{
        1:  684:			players[i] = 1;
        -:  685:		}
        -:  686:		else
        -:  687:		{
        3:  688:			players[i] = 0;
        -:  689:		}
        -:  690:	}
        -:  691:
        1:  692:	return 0;
        -:  693:}
        -:  694:
      480:  695:int drawCard(int player, struct gameState *state)
        -:  696:{	int count;
        -:  697:	int deckCounter;
      480:  698:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  699:
        -:  700:		//Step 1 Shuffle the discard pile back into a deck
        -:  701:		int i;
        -:  702:		//Move discard to deck
      516:  703:		for (i = 0; i < state->discardCount[player];i++){
      494:  704:			state->deck[player][i] = state->discard[player][i];
      494:  705:			state->discard[player][i] = -1;
        -:  706:		}
        -:  707:
       22:  708:		state->deckCount[player] = state->discardCount[player];
       22:  709:		state->discardCount[player] = 0;//Reset discard
        -:  710:
        -:  711:		//Shufffle the deck
       22:  712:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  713:
        -:  714:		if (DEBUG){//Debug statements
        -:  715:			printf("Deck count now: %dn", state->deckCount[player]);
        -:  716:		}
        -:  717:
       22:  718:		state->discardCount[player] = 0;
        -:  719:
        -:  720:		//Step 2 Draw Card
       22:  721:		count = state->handCount[player];//Get current player's hand count
        -:  722:
        -:  723:		if (DEBUG){//Debug statements
        -:  724:			printf("Current hand count: %dn", count);
        -:  725:		}
        -:  726:
       22:  727:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  728:
       22:  729:		if (deckCounter == 0)
    #####:  730:		return -1;
        -:  731:
       22:  732:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       22:  733:		state->deckCount[player]--;
       22:  734:		state->handCount[player]++;//Increment hand count
        -:  735:	}
        -:  736:
        -:  737:	else{
      458:  738:		int count = state->handCount[player];//Get current hand count for player
        -:  739:		int deckCounter;
        -:  740:		if (DEBUG){//Debug statements
        -:  741:			printf("Current hand count: %dn", count);
        -:  742:		}
        -:  743:
      458:  744:		deckCounter = state->deckCount[player];//Create holder for the deck count
      458:  745:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      458:  746:		state->deckCount[player]--;
      458:  747:		state->handCount[player]++;//Increment hand count
        -:  748:	}
        -:  749:
      480:  750:	return 0;
        -:  751:}
        -:  752:
      569:  753:int getCost(int cardNumber)
        -:  754:{
      569:  755:	switch( cardNumber )
        -:  756:	{
        -:  757:		case curse:
       20:  758:		return 0;
        -:  759:		case estate:
       21:  760:		return 2;
        -:  761:		case duchy:
       31:  762:		return 5;
        -:  763:		case province:
       37:  764:		return 8;
        -:  765:		case copper:
       67:  766:		return 0;
        -:  767:		case silver:
       60:  768:		return 3;
        -:  769:		case gold:
       37:  770:		return 6;
        -:  771:		case adventurer:
       31:  772:		return 6;
        -:  773:		case council_room:
       27:  774:		return 5;
        -:  775:		case feast:
    #####:  776:		return 4;
        -:  777:		case gardens:
       31:  778:		return 4;
        -:  779:		case mine:
       25:  780:		return 5;
        -:  781:		case remodel:
    #####:  782:		return 4;
        -:  783:		case smithy:
    #####:  784:		return 4;
        -:  785:		case village:
    #####:  786:		return 3;
        -:  787:		case baron:
    #####:  788:		return 4;
        -:  789:		case great_hall:
    #####:  790:		return 3;
        -:  791:		case minion:
    #####:  792:		return 5;
        -:  793:		case steward:
    #####:  794:		return 3;
        -:  795:		case tribute:
       30:  796:		return 5;
        -:  797:		case ambassador:
    #####:  798:		return 3;
        -:  799:		case cutpurse:
       29:  800:		return 4;
        -:  801:		case embargo:
       28:  802:		return 2;
        -:  803:		case outpost:
       28:  804:		return 5;
        -:  805:		case salvager:
       36:  806:		return 4;
        -:  807:		case sea_hag:
       31:  808:		return 4;
        -:  809:		case treasure_map:
    #####:  810:		return 4;
        -:  811:	}
        -:  812:
    #####:  813:	return -1;
        -:  814:}
        -:  815:
       30:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:	int i;
        -:  819:	int j;
        -:  820:	int k;
        -:  821:	int x;
        -:  822:	int index;
       30:  823:	int currentPlayer = whoseTurn(state);
       30:  824:	int nextPlayer = currentPlayer + 1;
        -:  825:
       30:  826:	int tributeRevealedCards[2] = {-1, -1};
        -:  827:	int temphand[MAX_HAND];// moved above the if statement
       30:  828:	int drawntreasure=0;
        -:  829:	int cardDrawn;
       30:  830:	int z = 0;// this is the counter for the temp hand
       30:  831:	if (nextPlayer > (state->numPlayers - 1)){
       17:  832:		nextPlayer = 0;
        -:  833:	}
        -:  834:
        -:  835:
        -:  836:	//uses switch to select card and perform actions
       30:  837:	switch( card )
        -:  838:	{
        -:  839:		case adventurer:
    #####:  840:            cardAdventurer(state, currentPlayer);
    #####:  841:            return 0;
        -:  842:
        -:  843:		case council_room:
        1:  844:            cardCouncilRoom(state, currentPlayer, handPos);
        1:  845:            return 0;
        -:  846:
        -:  847:        case feast:
    #####:  848:            cardFeast(state, currentPlayer, choice1);
    #####:  849:            return 0;
        -:  850:
        -:  851:		case gardens:
       17:  852:    		return -1;
        -:  853:
        -:  854:		case mine:
        1:  855:            return cardMine(state, currentPlayer, handPos, choice1, choice2);
        -:  856:
        -:  857:		case remodel:
    #####:  858:            return cardRemodel(state, currentPlayer, handPos, choice1, choice2);
        -:  859:
        -:  860:		case smithy:
        -:  861:			//+3 Cards
    #####:  862:			for (i = 0; i < 3; i++)
        -:  863:			{
    #####:  864:				drawCard(currentPlayer, state);
        -:  865:			}
        -:  866:
        -:  867:			//discard card from hand
    #####:  868:			discardCard(handPos, currentPlayer, state, 0);
    #####:  869:			return 0;
        -:  870:
        -:  871:		case village:
        -:  872:		//+1 Card
    #####:  873:		drawCard(currentPlayer, state);
        -:  874:
        -:  875:		//+2 Actions
    #####:  876:		state->numActions = state->numActions + 2;
        -:  877:
        -:  878:		//discard played card from hand
    #####:  879:		discardCard(handPos, currentPlayer, state, 0);
    #####:  880:		return 0;
        -:  881:
        -:  882:		case baron:
    #####:  883:		state->numBuys++;//Increase buys by 1!
    #####:  884:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  885:			int p = 0;//Iterator for hand!
    #####:  886:			int card_not_discarded = 1;//Flag for discard set!
    #####:  887:			while(card_not_discarded){
    #####:  888:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  889:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  890:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  891:					state->discardCount[currentPlayer]++;
    #####:  892:					for (;p < state->handCount[currentPlayer]; p++){
    #####:  893:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  894:					}
    #####:  895:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  896:					state->handCount[currentPlayer]--;
    #####:  897:					card_not_discarded = 0;//Exit the loop
        -:  898:				}
    #####:  899:				else if (p > state->handCount[currentPlayer]){
        -:  900:					if(DEBUG) {
        -:  901:						printf("No estate cards in your hand, invalid choicen");
        -:  902:						printf("Must gain an estate if there are anyn");
        -:  903:					}
    #####:  904:					if (supplyCount(estate, state) > 0){
    #####:  905:						gainCard(estate, state, 0, currentPlayer);
    #####:  906:						state->supplyCount[estate]--;//Decrement estates
    #####:  907:						if (supplyCount(estate, state) == 0){
    #####:  908:							isGameOver(state);
        -:  909:						}
        -:  910:					}
    #####:  911:					card_not_discarded = 0;//Exit the loop
        -:  912:				}
        -:  913:
        -:  914:				else{
    #####:  915:					p++;//Next card
        -:  916:				}
        -:  917:			}
        -:  918:		}
        -:  919:
        -:  920:		else{
    #####:  921:			if (supplyCount(estate, state) > 0){
    #####:  922:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  923:				state->supplyCount[estate]--;//Decrement Estates
    #####:  924:				if (supplyCount(estate, state) == 0){
    #####:  925:					isGameOver(state);
        -:  926:				}
        -:  927:			}
        -:  928:		}
        -:  929:
        -:  930:
    #####:  931:		return 0;
        -:  932:
        -:  933:		case great_hall:
        -:  934:		//+1 Card
    #####:  935:		drawCard(currentPlayer, state);
        -:  936:
        -:  937:		//+1 Actions
    #####:  938:		state->numActions++;
        -:  939:
        -:  940:		//discard card from hand
    #####:  941:		discardCard(handPos, currentPlayer, state, 0);
    #####:  942:		return 0;
        -:  943:
        -:  944:		case minion:
        -:  945:		//+1 action
    #####:  946:		state->numActions++;
        -:  947:
        -:  948:		//discard card from hand
    #####:  949:		discardCard(handPos, currentPlayer, state, 0);
        -:  950:
    #####:  951:		if (choice1)		//+2 coins
        -:  952:		{
    #####:  953:			state->coins = state->coins + 2;
        -:  954:		}
        -:  955:
    #####:  956:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  957:		{
        -:  958:			//discard hand
    #####:  959:			while(numHandCards(state) > 0)
        -:  960:			{
    #####:  961:				discardCard(handPos, currentPlayer, state, 0);
        -:  962:			}
        -:  963:
        -:  964:			//draw 4
    #####:  965:			for (i = 0; i < 4; i++)
        -:  966:			{
    #####:  967:				drawCard(currentPlayer, state);
        -:  968:			}
        -:  969:
        -:  970:			//other players discard hand and redraw if hand size > 4
    #####:  971:			for (i = 0; i < state->numPlayers; i++)
        -:  972:			{
    #####:  973:				if (i != currentPlayer)
        -:  974:				{
    #####:  975:					if ( state->handCount[i] > 4 )
        -:  976:					{
        -:  977:						//discard hand
    #####:  978:						while( state->handCount[i] > 0 )
        -:  979:						{
    #####:  980:							discardCard(handPos, i, state, 0);
        -:  981:						}
        -:  982:
        -:  983:						//draw 4
    #####:  984:						for (j = 0; j < 4; j++)
        -:  985:						{
    #####:  986:							drawCard(i, state);
        -:  987:						}
        -:  988:					}
        -:  989:				}
        -:  990:			}
        -:  991:
        -:  992:		}
    #####:  993:		return 0;
        -:  994:
        -:  995:		case steward:
    #####:  996:		if (choice1 == 1)
        -:  997:		{
        -:  998:			//+2 cards
    #####:  999:			drawCard(currentPlayer, state);
    #####: 1000:			drawCard(currentPlayer, state);
        -: 1001:		}
    #####: 1002:		else if (choice1 == 2)
        -: 1003:		{
        -: 1004:			//+2 coins
    #####: 1005:			state->coins = state->coins + 2;
        -: 1006:		}
        -: 1007:		else
        -: 1008:		{
        -: 1009:			//trash 2 cards in hand
    #####: 1010:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1011:			discardCard(choice3, currentPlayer, state, 1);
        -: 1012:		}
        -: 1013:
        -: 1014:		//discard card from hand
    #####: 1015:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:		return 0;
        -: 1017:
        -: 1018:		case tribute:
    #####: 1019:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1020:			if (state->deckCount[nextPlayer] > 0){
    #####: 1021:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1022:				state->deckCount[nextPlayer]--;
        -: 1023:			}
    #####: 1024:			else if (state->discardCount[nextPlayer] > 0){
    #####: 1025:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1026:				state->discardCount[nextPlayer]--;
        -: 1027:			}
        -: 1028:			else{
        -: 1029:				//No Card to Reveal
        -: 1030:				if (DEBUG){
        -: 1031:					printf("No cards to revealn");
        -: 1032:				}
        -: 1033:			}
        -: 1034:		}
        -: 1035:
        -: 1036:		else{
    #####: 1037:			if (state->deckCount[nextPlayer] == 0){
    #####: 1038:				for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1039:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1040:					state->deckCount[nextPlayer]++;
    #####: 1041:					state->discard[nextPlayer][i] = -1;
    #####: 1042:					state->discardCount[nextPlayer]--;
        -: 1043:				}
        -: 1044:
    #####: 1045:				shuffle(nextPlayer,state);//Shuffle the deck
        -: 1046:			}
    #####: 1047:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1048:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1049:			state->deckCount[nextPlayer]--;
    #####: 1050:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:			state->deckCount[nextPlayer]--;
        -: 1053:		}
        -: 1054:
    #####: 1055:		if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1056:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1057:			state->playedCardCount++;
    #####: 1058:			tributeRevealedCards[1] = -1;
        -: 1059:		}
        -: 1060:
    #####: 1061:		for (i = 0; i <= 2; i ++){
    #####: 1062:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1063:				state->coins += 2;
        -: 1064:			}
        -: 1065:
    #####: 1066:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1067:				drawCard(currentPlayer, state);
    #####: 1068:				drawCard(currentPlayer, state);
        -: 1069:			}
        -: 1070:			else{//Action Card
    #####: 1071:				state->numActions = state->numActions + 2;
        -: 1072:			}
        -: 1073:		}
        -: 1074:
    #####: 1075:		return 0;
        -: 1076:
        -: 1077:		case ambassador:
    #####: 1078:		j = 0;		//used to check if player has enough cards to discard
        -: 1079:
    #####: 1080:		if (choice2 > 2 || choice2 < 0)
        -: 1081:		{
    #####: 1082:			return -1;
        -: 1083:		}
        -: 1084:
    #####: 1085:		if (choice1 == handPos)
        -: 1086:		{
    #####: 1087:			return -1;
        -: 1088:		}
        -: 1089:
    #####: 1090:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:		{
    #####: 1092:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1093:			{
    #####: 1094:				j++;
        -: 1095:			}
        -: 1096:		}
    #####: 1097:		if (j < choice2)
        -: 1098:		{
    #####: 1099:			return -1;
        -: 1100:		}
        -: 1101:
        -: 1102:		if (DEBUG)
        -: 1103:		printf("Player %d reveals card number: %dn", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1104:
        -: 1105:		//increase supply count for choosen card by amount being discarded
    #####: 1106:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1107:
        -: 1108:		//each other player gains a copy of revealed card
    #####: 1109:		for (i = 0; i < state->numPlayers; i++)
        -: 1110:		{
    #####: 1111:			if (i != currentPlayer)
        -: 1112:			{
    #####: 1113:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1114:			}
        -: 1115:		}
        -: 1116:
        -: 1117:		//discard played card from hand
    #####: 1118:		discardCard(handPos, currentPlayer, state, 0);
        -: 1119:
        -: 1120:		//trash copies of cards returned to supply
    #####: 1121:		for (j = 0; j < choice2; j++)
        -: 1122:		{
    #####: 1123:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1124:			{
    #####: 1125:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1126:				{
    #####: 1127:					discardCard(i, currentPlayer, state, 1);
    #####: 1128:					break;
        -: 1129:				}
        -: 1130:			}
        -: 1131:		}
        -: 1132:
    #####: 1133:		return 0;
        -: 1134:
        -: 1135:		case cutpurse:
        -: 1136:
        1: 1137:		updateCoins(currentPlayer, state, 2);
        3: 1138:		for (i = 0; i < state->numPlayers; i++)
        -: 1139:		{
        2: 1140:			if (i != currentPlayer)
        -: 1141:			{
        1: 1142:				for (j = 0; j < state->handCount[i]; j++)
        -: 1143:				{
    #####: 1144:					if (state->hand[i][j] == copper)
        -: 1145:					{
    #####: 1146:						discardCard(j, i, state, 0);
    #####: 1147:						break;
        -: 1148:					}
    #####: 1149:					if (j == state->handCount[i])
        -: 1150:					{
    #####: 1151:						for (k = 0; k < state->handCount[i]; k++)
        -: 1152:						{
        -: 1153:							if (DEBUG)
        -: 1154:							printf("Player %d reveals card number %dn", i, state->hand[i][k]);
        -: 1155:						}
    #####: 1156:						break;
        -: 1157:					}
        -: 1158:				}
        -: 1159:
        -: 1160:			}
        -: 1161:
        -: 1162:		}
        -: 1163:
        -: 1164:		//discard played card from hand
        1: 1165:		discardCard(handPos, currentPlayer, state, 0);
        -: 1166:
        1: 1167:		return 0;
        -: 1168:
        -: 1169:
        -: 1170:		case embargo:
        -: 1171:		//+2 Coins
        6: 1172:		state->coins = state->coins + 2;
        -: 1173:
        -: 1174:		//see if selected pile is in play
        6: 1175:		if ( state->supplyCount[choice1] == -1 )
        -: 1176:		{
    #####: 1177:			return -1;
        -: 1178:		}
        -: 1179:
        -: 1180:		//add embargo token to selected supply pile
        6: 1181:		state->embargoTokens[choice1]++;
        -: 1182:
        -: 1183:		//trash card
        6: 1184:		discardCard(handPos, currentPlayer, state, 1);
        6: 1185:		return 0;
        -: 1186:
        -: 1187:		case outpost:
        -: 1188:		//set outpost flag
    #####: 1189:		state->outpostPlayed++;
        -: 1190:
        -: 1191:		//discard card
    #####: 1192:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1193:		return 0;
        -: 1194:
        -: 1195:		case salvager:
        -: 1196:		//+1 buy
        1: 1197:		state->numBuys++;
        -: 1198:
        1: 1199:		if (choice1)
        -: 1200:		{
        -: 1201:			//gain coins equal to trashed card
        1: 1202:			state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:			//trash card
        1: 1204:			discardCard(choice1, currentPlayer, state, 1);
        -: 1205:		}
        -: 1206:
        -: 1207:		//discard card
        1: 1208:		discardCard(handPos, currentPlayer, state, 0);
        1: 1209:		return 0;
        -: 1210:
        -: 1211:		case sea_hag:
        9: 1212:		for (i = 0; i < state->numPlayers; i++){
        6: 1213:			if (i != currentPlayer){
        3: 1214:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        3: 1215:				state->discardCount[i]++;
        3: 1216:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:			}
        -: 1218:		}
        3: 1219:		return 0;
        -: 1220:
        -: 1221:		case treasure_map:
        -: 1222:		//search hand for another treasure_map
    #####: 1223:		index = -1;
    #####: 1224:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:		{
    #####: 1226:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:			{
    #####: 1228:				index = i;
    #####: 1229:				break;
        -: 1230:			}
        -: 1231:		}
    #####: 1232:		if (index > -1)
        -: 1233:		{
        -: 1234:			//trash both treasure cards
    #####: 1235:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:			discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:			//gain 4 Gold cards
    #####: 1239:			for (i = 0; i < 4; i++)
        -: 1240:			{
    #####: 1241:				gainCard(gold, state, 1, currentPlayer);
        -: 1242:			}
        -: 1243:
        -: 1244:			//return success
    #####: 1245:			return 1;
        -: 1246:		}
        -: 1247:
        -: 1248:		//no second treasure_map found in hand
    #####: 1249:		return -1;
        -: 1250:	}
        -: 1251:
    #####: 1252:	return -1;
        -: 1253:}
        -: 1254:
       30: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:	//if card is not trashed, added to Played pile
       30: 1259:	if (trashFlag < 1)
        -: 1260:	{
        -: 1261:		//add card to played pile
       23: 1262:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       23: 1263:		state->playedCardCount++;
        -: 1264:	}
        -: 1265:
        -: 1266:	//set played card to -1
       30: 1267:	state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:	//remove card from player's hand
       30: 1270:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:	{
        -: 1272:		//reduce number of cards in hand
        2: 1273:		state->handCount[currentPlayer]--;
        -: 1274:	}
       28: 1275:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
        -: 1280:	else
        -: 1281:	{
        -: 1282:		//replace discarded card with last card in hand
       28: 1283:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:		//set last card to -1
       28: 1285:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:		//reduce number of cards in hand
       28: 1287:		state->handCount[currentPlayer]--;
        -: 1288:	}
        -: 1289:
       30: 1290:	return 0;
        -: 1291:}
        -: 1292:
       97: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:	//Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:	//check if supply pile is empty (0) or card is not used in game (-1)
       97: 1298:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:	{
    #####: 1300:		return -1;
        -: 1301:	}
        -: 1302:
        -: 1303:	//added card for [whoseTurn] current player:
        -: 1304:	// toFlag = 0 : add to discard
        -: 1305:	// toFlag = 1 : add to deck
        -: 1306:	// toFlag = 2 : add to hand
        -: 1307:
       97: 1308:	if (toFlag == 1)
        -: 1309:	{
    #####: 1310:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:		state->deckCount[player]++;
        -: 1312:	}
       97: 1313:	else if (toFlag == 2)
        -: 1314:	{
        1: 1315:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1316:		state->handCount[player]++;
        -: 1317:	}
        -: 1318:	else
        -: 1319:	{
       96: 1320:		state->discard[player][ state->discardCount[player] ] = supplyPos;
       96: 1321:		state->discardCount[player]++;
        -: 1322:	}
        -: 1323:
        -: 1324:	//decrease number in supply pile
       97: 1325:	state->supplyCount[supplyPos]--;
        -: 1326:
       97: 1327:	return 0;
        -: 1328:}
        -: 1329:
      108: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:	int i;
        -: 1333:
        -: 1334:	//reset coin count
      108: 1335:	state->coins = 0;
        -: 1336:
        -: 1337:	//add coins for each Treasure card in player's hand
      642: 1338:	for (i = 0; i < state->handCount[player]; i++)
        -: 1339:	{
      534: 1340:		if (state->hand[player][i] == copper)
        -: 1341:		{
      250: 1342:			state->coins += 1;
        -: 1343:		}
      284: 1344:		else if (state->hand[player][i] == silver)
        -: 1345:		{
       52: 1346:			state->coins += 2;
        -: 1347:		}
      232: 1348:		else if (state->hand[player][i] == gold)
        -: 1349:		{
    #####: 1350:			state->coins += 3;
        -: 1351:		}
        -: 1352:	}
        -: 1353:
        -: 1354:	//add bonus
      108: 1355:	state->coins += bonus;
        -: 1356:
      108: 1357:	return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
